#!/usr/bin/env python3
"""
Script setup ƒë·ªÉ ki·ªÉm tra v√† kh·ªüi t·∫°o database cho Bot Discord
"""

import sqlite3
import os
from datetime import datetime

def setup_database():
    """Kh·ªüi t·∫°o database v√† t·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt"""
    print("üîß ƒêang kh·ªüi t·∫°o database...")
    
    # K·∫øt n·ªëi database
    conn = sqlite3.connect('bot_database.db')
    cur = conn.cursor()
    
    # T·∫°o b·∫£ng partners
    cur.execute('''
        CREATE TABLE IF NOT EXISTS partners (
            partner_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_name TEXT NOT NULL,
            server_id TEXT NOT NULL,
            timezone TEXT DEFAULT '+07:00',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(partner_name, server_id)
        )
    ''')
    print("‚úÖ B·∫£ng partners ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    # T·∫°o b·∫£ng partner_discord_users ƒë·ªÉ l∆∞u nhi·ªÅu Discord users cho m·ªôt partner
    cur.execute('''
        CREATE TABLE IF NOT EXISTS partner_discord_users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_id INTEGER NOT NULL,
            discord_username TEXT NOT NULL,
            tag_type TEXT DEFAULT 'username',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            UNIQUE(partner_id, discord_username)
        )
    ''')
    print("‚úÖ B·∫£ng partner_discord_users ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    # T·∫°o b·∫£ng projects
    cur.execute('''
        CREATE TABLE IF NOT EXISTS projects (
            project_id INTEGER PRIMARY KEY AUTOINCREMENT,
            project_name TEXT NOT NULL,
            partner_id INTEGER NOT NULL,
            channel_id TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            UNIQUE(project_name, partner_id)
        )
    ''')
    print("‚úÖ B·∫£ng projects ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    # T·∫°o b·∫£ng messages
    cur.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            message_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_id INTEGER NOT NULL,
            project_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            discord_message_id TEXT,
            status TEXT DEFAULT 'request',
            reply_timestamp TEXT,
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            FOREIGN KEY (project_id) REFERENCES projects (project_id) ON DELETE CASCADE
        )
    ''')
    print("‚úÖ B·∫£ng messages ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    # T·∫°o b·∫£ng schedules
    cur.execute('''
        CREATE TABLE IF NOT EXISTS schedules (
            schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_id INTEGER NOT NULL,
            project_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            scheduled_for TEXT NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            FOREIGN KEY (project_id) REFERENCES projects (project_id) ON DELETE CASCADE
        )
    ''')
    print("‚úÖ B·∫£ng schedules ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    # T·∫°o b·∫£ng templates
    cur.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            template_id INTEGER PRIMARY KEY AUTOINCREMENT,
            template_name TEXT NOT NULL UNIQUE,
            template_content TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("‚úÖ B·∫£ng templates ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    # Commit v√† ƒë√≥ng k·∫øt n·ªëi
    conn.commit()
    conn.close()
    
    print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")

def check_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng v√† c·∫•u h√¨nh"""
    print("üîç ƒêang ki·ªÉm tra m√¥i tr∆∞·ªùng...")
    
    # Ki·ªÉm tra file .env
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  File .env kh√¥ng t·ªìn t·∫°i!")
        print("üìù Vui l√≤ng t·∫°o file .env v·ªõi n·ªôi dung:")
        print("DISCORD_TOKEN=YOUR_BOT_TOKEN")
        return False
    
    # Ki·ªÉm tra dependencies
    try:
        import discord
        print("‚úÖ discord.py ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
    except ImportError:
        print("‚ùå discord.py ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print("üí° Ch·∫°y: pip install -r requirements.txt")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
    except ImportError:
        print("‚ùå python-dotenv ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print("üí° Ch·∫°y: pip install -r requirements.txt")
        return False
    
    # Ki·ªÉm tra token
    load_dotenv()
    token = os.getenv('DISCORD_TOKEN')
    if not token or token == 'YOUR_BOT_TOKEN':
        print("‚ö†Ô∏è  DISCORD_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!")
        print("üí° Vui l√≤ng c·∫≠p nh·∫≠t file .env v·ªõi token th·ª±c")
        return False
    
    print("‚úÖ M√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!")
    return True

def main():
    """H√†m ch√≠nh"""
    print("ü§ñ Bot Discord Setup")
    print("=" * 50)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not check_environment():
        print("\n‚ùå Setup kh√¥ng th√†nh c√¥ng!")
        return
    
    # Kh·ªüi t·∫°o database
    setup_database()
    
    print("\nüéâ Setup ho√†n t·∫•t!")
    print("üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y: python bot.py")

if __name__ == "__main__":
    main() 