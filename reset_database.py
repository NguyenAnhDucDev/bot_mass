import sqlite3
import os

def reset_database():
    """X√≥a to√†n b·ªô d·ªØ li·ªáu c≈© v√† t·∫°o l·∫°i database"""
    
    # X√≥a file database c≈© n·∫øu t·ªìn t·∫°i
    if os.path.exists('bot_database.db'):
        os.remove('bot_database.db')
        print("ƒê√£ x√≥a database c≈©")
    
    # T·∫°o database m·ªõi
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # T·∫°o b·∫£ng partners v·ªõi c·∫•u tr√∫c m·ªõi
    cur.execute('''
        CREATE TABLE IF NOT EXISTS partners (
            partner_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_name TEXT NOT NULL,
            server_id TEXT NOT NULL,
            timezone TEXT DEFAULT '+07:00',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(partner_name, server_id)
        )
    ''')
    
    # T·∫°o b·∫£ng partner_discord_users ƒë·ªÉ l∆∞u nhi·ªÅu Discord users cho m·ªôt partner
    cur.execute('''
        CREATE TABLE IF NOT EXISTS partner_discord_users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_id INTEGER NOT NULL,
            discord_username TEXT NOT NULL,
            tag_type TEXT DEFAULT 'username',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            UNIQUE(partner_id, discord_username)
        )
    ''')
    
    # T·∫°o b·∫£ng projects
    cur.execute('''
        CREATE TABLE IF NOT EXISTS projects (
            project_id INTEGER PRIMARY KEY AUTOINCREMENT,
            project_name TEXT NOT NULL,
            partner_id INTEGER NOT NULL,
            channel_id TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            UNIQUE(project_name, partner_id)
        )
    ''')
    
    # T·∫°o b·∫£ng messages
    cur.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            message_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_id INTEGER NOT NULL,
            project_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            discord_message_id TEXT,
            status TEXT DEFAULT 'sent',
            reply_status TEXT DEFAULT 'pending',
            reply_timestamp TEXT,
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            FOREIGN KEY (project_id) REFERENCES projects (project_id) ON DELETE CASCADE
        )
    ''')
    
    # T·∫°o b·∫£ng schedules
    cur.execute('''
        CREATE TABLE IF NOT EXISTS schedules (
            schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,
            partner_id INTEGER NOT NULL,
            project_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            scheduled_for TEXT NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (partner_id) REFERENCES partners (partner_id) ON DELETE CASCADE,
            FOREIGN KEY (project_id) REFERENCES projects (project_id) ON DELETE CASCADE
        )
    ''')
    
    # T·∫°o b·∫£ng templates
    cur.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            template_id INTEGER PRIMARY KEY AUTOINCREMENT,
            template_name TEXT NOT NULL UNIQUE,
            template_content TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    
    print("‚úÖ ƒê√£ t·∫°o l·∫°i database v·ªõi c·∫•u tr√∫c m·ªõi!")
    print("üìä C·∫•u tr√∫c m·ªõi:")
    print("‚Ä¢ partners: L∆∞u th√¥ng tin partner")
    print("‚Ä¢ partner_discord_users: L∆∞u nhi·ªÅu Discord users cho m·ªôt partner")
    print("‚Ä¢ projects: L∆∞u th√¥ng tin projects")
    print("‚Ä¢ messages: L∆∞u tin nh·∫Øn ƒë√£ g·ª≠i")
    print("‚Ä¢ schedules: L∆∞u tin nh·∫Øn ƒë√£ l√™n l·ªãch")
    print("‚Ä¢ templates: L∆∞u templates tin nh·∫Øn")

if __name__ == "__main__":
    confirm = input("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu c≈©? (y/N): ")
    if confirm.lower() == 'y':
        reset_database()
    else:
        print("‚ùå H·ªßy b·ªè vi·ªác x√≥a database") 